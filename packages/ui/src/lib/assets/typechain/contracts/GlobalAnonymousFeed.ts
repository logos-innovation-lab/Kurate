/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
	BaseContract,
	BigNumber,
	BigNumberish,
	BytesLike,
	CallOverrides,
	ContractTransaction,
	Overrides,
	PopulatedTransaction,
	Signer,
	utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
	TypedEventFilter,
	TypedEvent,
	TypedListener,
	OnEvent,
	PromiseOrValue,
} from '../common'

export interface GlobalAnonymousFeedInterface extends utils.Interface {
	functions: {
		'groupId()': FunctionFragment
		'joinGroup(uint256)': FunctionFragment
		'registeredIdentities(uint256)': FunctionFragment
		'semaphore()': FunctionFragment
		'sendMessage(string,uint256,uint256,uint256[8])': FunctionFragment
	}

	getFunction(
		nameOrSignatureOrTopic:
			| 'groupId'
			| 'joinGroup'
			| 'registeredIdentities'
			| 'semaphore'
			| 'sendMessage',
	): FunctionFragment

	encodeFunctionData(functionFragment: 'groupId', values?: undefined): string
	encodeFunctionData(functionFragment: 'joinGroup', values: [PromiseOrValue<BigNumberish>]): string
	encodeFunctionData(
		functionFragment: 'registeredIdentities',
		values: [PromiseOrValue<BigNumberish>],
	): string
	encodeFunctionData(functionFragment: 'semaphore', values?: undefined): string
	encodeFunctionData(
		functionFragment: 'sendMessage',
		values: [
			PromiseOrValue<string>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>[],
		],
	): string

	decodeFunctionResult(functionFragment: 'groupId', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'joinGroup', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'registeredIdentities', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'semaphore', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'sendMessage', data: BytesLike): Result

	events: {
		'NewIdentity(uint256)': EventFragment
		'NewMessage(string)': EventFragment
	}

	getEvent(nameOrSignatureOrTopic: 'NewIdentity'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'NewMessage'): EventFragment
}

export interface NewIdentityEventObject {
	identityCommitment: BigNumber
}
export type NewIdentityEvent = TypedEvent<[BigNumber], NewIdentityEventObject>

export type NewIdentityEventFilter = TypedEventFilter<NewIdentityEvent>

export interface NewMessageEventObject {
	message: string
}
export type NewMessageEvent = TypedEvent<[string], NewMessageEventObject>

export type NewMessageEventFilter = TypedEventFilter<NewMessageEvent>

export interface GlobalAnonymousFeed extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this
	attach(addressOrName: string): this
	deployed(): Promise<this>

	interface: GlobalAnonymousFeedInterface

	queryFilter<TEvent extends TypedEvent>(
		event: TypedEventFilter<TEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined,
	): Promise<Array<TEvent>>

	listeners<TEvent extends TypedEvent>(
		eventFilter?: TypedEventFilter<TEvent>,
	): Array<TypedListener<TEvent>>
	listeners(eventName?: string): Array<Listener>
	removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
	removeAllListeners(eventName?: string): this
	off: OnEvent<this>
	on: OnEvent<this>
	once: OnEvent<this>
	removeListener: OnEvent<this>

	functions: {
		groupId(overrides?: CallOverrides): Promise<[BigNumber]>

		joinGroup(
			identityCommitment: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		registeredIdentities(
			arg0: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<[boolean]>

		semaphore(overrides?: CallOverrides): Promise<[string]>

		sendMessage(
			message: PromiseOrValue<string>,
			merkleTreeRoot: PromiseOrValue<BigNumberish>,
			nullifierHash: PromiseOrValue<BigNumberish>,
			proof: PromiseOrValue<BigNumberish>[],
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>
	}

	groupId(overrides?: CallOverrides): Promise<BigNumber>

	joinGroup(
		identityCommitment: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	registeredIdentities(
		arg0: PromiseOrValue<BigNumberish>,
		overrides?: CallOverrides,
	): Promise<boolean>

	semaphore(overrides?: CallOverrides): Promise<string>

	sendMessage(
		message: PromiseOrValue<string>,
		merkleTreeRoot: PromiseOrValue<BigNumberish>,
		nullifierHash: PromiseOrValue<BigNumberish>,
		proof: PromiseOrValue<BigNumberish>[],
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	callStatic: {
		groupId(overrides?: CallOverrides): Promise<BigNumber>

		joinGroup(
			identityCommitment: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<void>

		registeredIdentities(
			arg0: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<boolean>

		semaphore(overrides?: CallOverrides): Promise<string>

		sendMessage(
			message: PromiseOrValue<string>,
			merkleTreeRoot: PromiseOrValue<BigNumberish>,
			nullifierHash: PromiseOrValue<BigNumberish>,
			proof: PromiseOrValue<BigNumberish>[],
			overrides?: CallOverrides,
		): Promise<void>
	}

	filters: {
		'NewIdentity(uint256)'(identityCommitment?: null): NewIdentityEventFilter
		NewIdentity(identityCommitment?: null): NewIdentityEventFilter

		'NewMessage(string)'(message?: null): NewMessageEventFilter
		NewMessage(message?: null): NewMessageEventFilter
	}

	estimateGas: {
		groupId(overrides?: CallOverrides): Promise<BigNumber>

		joinGroup(
			identityCommitment: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		registeredIdentities(
			arg0: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<BigNumber>

		semaphore(overrides?: CallOverrides): Promise<BigNumber>

		sendMessage(
			message: PromiseOrValue<string>,
			merkleTreeRoot: PromiseOrValue<BigNumberish>,
			nullifierHash: PromiseOrValue<BigNumberish>,
			proof: PromiseOrValue<BigNumberish>[],
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>
	}

	populateTransaction: {
		groupId(overrides?: CallOverrides): Promise<PopulatedTransaction>

		joinGroup(
			identityCommitment: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		registeredIdentities(
			arg0: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>

		semaphore(overrides?: CallOverrides): Promise<PopulatedTransaction>

		sendMessage(
			message: PromiseOrValue<string>,
			merkleTreeRoot: PromiseOrValue<BigNumberish>,
			nullifierHash: PromiseOrValue<BigNumberish>,
			proof: PromiseOrValue<BigNumberish>[],
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>
	}
}
