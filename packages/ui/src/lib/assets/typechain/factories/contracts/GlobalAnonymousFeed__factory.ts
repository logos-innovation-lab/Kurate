/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { type Signer, utils, Contract, ContractFactory, type Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../../common'
import type {
	GlobalAnonymousFeed,
	GlobalAnonymousFeedInterface,
} from '../../contracts/GlobalAnonymousFeed'

const _abi = [
	{
		inputs: [
			{
				internalType: 'address',
				name: 'semaphoreAddress',
				type: 'address',
			},
		],
		stateMutability: 'nonpayable',
		type: 'constructor',
	},
	{
		inputs: [],
		name: 'GroupAlreadyExists',
		type: 'error',
	},
	{
		inputs: [],
		name: 'GroupNotCreated',
		type: 'error',
	},
	{
		inputs: [],
		name: 'IdentityAlreadyExists',
		type: 'error',
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: 'uint256',
				name: 'groupId',
				type: 'uint256',
			},
		],
		name: 'NewGroup',
		type: 'event',
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: 'uint256',
				name: 'groupId',
				type: 'uint256',
			},
			{
				indexed: false,
				internalType: 'uint256',
				name: 'identityCommitment',
				type: 'uint256',
			},
		],
		name: 'NewIdentity',
		type: 'event',
	},
	{
		inputs: [
			{
				internalType: 'uint256',
				name: 'groupId',
				type: 'uint256',
			},
			{
				internalType: 'uint256',
				name: 'identityCommitment',
				type: 'uint256',
			},
		],
		name: 'createAndJoin',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'uint256',
				name: 'groupId',
				type: 'uint256',
			},
		],
		name: 'createGroup',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'uint256',
				name: '',
				type: 'uint256',
			},
			{
				internalType: 'uint256',
				name: '',
				type: 'uint256',
			},
		],
		name: 'groupMembers',
		outputs: [
			{
				internalType: 'bool',
				name: '',
				type: 'bool',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'uint256',
				name: '',
				type: 'uint256',
			},
		],
		name: 'groups',
		outputs: [
			{
				internalType: 'bool',
				name: '',
				type: 'bool',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'uint256',
				name: 'groupId',
				type: 'uint256',
			},
			{
				internalType: 'uint256',
				name: 'identityCommitment',
				type: 'uint256',
			},
		],
		name: 'joinGroup',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [],
		name: 'semaphore',
		outputs: [
			{
				internalType: 'contract ISemaphore',
				name: '',
				type: 'address',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
] as const

const _bytecode =
	'0x608060405234801561001057600080fd5b506040516108a13803806108a18339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100ff565b600081519050610087816100e8565b92915050565b60006020828403121561009f57600080fd5b60006100ad84828501610078565b91505092915050565b60006100c1826100c8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100f1816100b6565b81146100fc57600080fd5b50565b6107938061010e6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631a0c750c146100675780635bf3c8c31461008357806365bf60e01461009f5780637b5d2534146100bb57806396324bd4146100d9578063c6f6a74914610109575b600080fd5b610081600480360381019061007c9190610590565b610139565b005b61009d60048036038101906100989190610590565b61030e565b005b6100b960048036038101906100b49190610567565b6103ea565b005b6100c36104df565b6040516100d09190610632565b60405180910390f35b6100f360048036038101906100ee9190610567565b610503565b6040516101009190610617565b60405180910390f35b610123600480360381019061011e9190610590565b610523565b6040516101309190610617565b60405180910390f35b600115156001600084815260200190815260200160002060009054906101000a900460ff16151514610197576040517fde89197f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001151560026000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1615151415610207576040517f6b41035600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631783efc383836040518363ffffffff1660e01b815260040161026292919061069f565b600060405180830381600087803b15801561027c57600080fd5b505af1158015610290573d6000803e3d6000fd5b50505050600160026000848152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f9022b21ab9c606c8b7762c72f1613d50200eec8917cbeed3d0e0484c983cd876828260405161030292919061069f565b60405180910390a15050565b3073ffffffffffffffffffffffffffffffffffffffff166365bf60e0836040518263ffffffff1660e01b8152600401610347919061064d565b600060405180830381600087803b15801561036157600080fd5b505af1158015610375573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff16631a0c750c83836040518363ffffffff1660e01b81526004016103b492919061069f565b600060405180830381600087803b1580156103ce57600080fd5b505af11580156103e2573d6000803e3d6000fd5b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639c112141826014306040518463ffffffff1660e01b815260040161044893929190610668565b600060405180830381600087803b15801561046257600080fd5b505af1158015610476573d6000803e3d6000fd5b50505050600180600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f914422ff967590d7a717ee85a39e76d52e3d31b944b0749d0b27161703e4379d816040516104d4919061064d565b60405180910390a150565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915054906101000a900460ff1681565b60026020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60008135905061056181610746565b92915050565b60006020828403121561057957600080fd5b600061058784828501610552565b91505092915050565b600080604083850312156105a357600080fd5b60006105b185828601610552565b92505060206105c285828601610552565b9150509250929050565b6105d5816106c8565b82525050565b6105e4816106da565b82525050565b6105f381610710565b82525050565b61060281610734565b82525050565b61061181610706565b82525050565b600060208201905061062c60008301846105db565b92915050565b600060208201905061064760008301846105ea565b92915050565b60006020820190506106626000830184610608565b92915050565b600060608201905061067d6000830186610608565b61068a60208301856105f9565b61069760408301846105cc565b949350505050565b60006040820190506106b46000830185610608565b6106c16020830184610608565b9392505050565b60006106d3826106e6565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061071b82610722565b9050919050565b600061072d826106e6565b9050919050565b600061073f82610706565b9050919050565b61074f81610706565b811461075a57600080fd5b5056fea26469706673582212200bbb758a5b5c98511933c10cb61efd1b1fb1beba55950a973db7c98b78f9e58564736f6c63430008040033'

type GlobalAnonymousFeedConstructorParams =
	| [signer?: Signer]
	| ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
	xs: GlobalAnonymousFeedConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class GlobalAnonymousFeed__factory extends ContractFactory {
	constructor(...args: GlobalAnonymousFeedConstructorParams) {
		if (isSuperArgs(args)) {
			super(...args)
		} else {
			super(_abi, _bytecode, args[0])
		}
	}

	override deploy(
		semaphoreAddress: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<GlobalAnonymousFeed> {
		return super.deploy(semaphoreAddress, overrides || {}) as Promise<GlobalAnonymousFeed>
	}
	override getDeployTransaction(
		semaphoreAddress: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): TransactionRequest {
		return super.getDeployTransaction(semaphoreAddress, overrides || {})
	}
	override attach(address: string): GlobalAnonymousFeed {
		return super.attach(address) as GlobalAnonymousFeed
	}
	override connect(signer: Signer): GlobalAnonymousFeed__factory {
		return super.connect(signer) as GlobalAnonymousFeed__factory
	}

	static readonly bytecode = _bytecode
	static readonly abi = _abi
	static createInterface(): GlobalAnonymousFeedInterface {
		return new utils.Interface(_abi) as GlobalAnonymousFeedInterface
	}
	static connect(address: string, signerOrProvider: Signer | Provider): GlobalAnonymousFeed {
		return new Contract(address, _abi, signerOrProvider) as GlobalAnonymousFeed
	}
}
