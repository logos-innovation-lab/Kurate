/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, type BigNumberish, type Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../../common'
import type {
	GlobalAnonymousFeed,
	GlobalAnonymousFeedInterface,
} from '../../contracts/GlobalAnonymousFeed'

const _abi = [
	{
		inputs: [
			{
				internalType: 'address',
				name: 'semaphoreAddress',
				type: 'address',
			},
			{
				internalType: 'uint256',
				name: '_groupId',
				type: 'uint256',
			},
		],
		stateMutability: 'nonpayable',
		type: 'constructor',
	},
	{
		inputs: [],
		name: 'IdentityAlreadyExists',
		type: 'error',
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: 'uint256',
				name: 'identityCommitment',
				type: 'uint256',
			},
		],
		name: 'NewIdentity',
		type: 'event',
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: 'string',
				name: 'message',
				type: 'string',
			},
		],
		name: 'NewMessage',
		type: 'event',
	},
	{
		inputs: [],
		name: 'groupId',
		outputs: [
			{
				internalType: 'uint256',
				name: '',
				type: 'uint256',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'uint256',
				name: 'identityCommitment',
				type: 'uint256',
			},
		],
		name: 'joinGroup',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'uint256',
				name: '',
				type: 'uint256',
			},
		],
		name: 'registeredIdentities',
		outputs: [
			{
				internalType: 'bool',
				name: '',
				type: 'bool',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [],
		name: 'semaphore',
		outputs: [
			{
				internalType: 'contract ISemaphore',
				name: '',
				type: 'address',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [
			{
				internalType: 'string',
				name: 'message',
				type: 'string',
			},
			{
				internalType: 'uint256',
				name: 'merkleTreeRoot',
				type: 'uint256',
			},
			{
				internalType: 'uint256',
				name: 'nullifierHash',
				type: 'uint256',
			},
			{
				internalType: 'uint256[8]',
				name: 'proof',
				type: 'uint256[8]',
			},
		],
		name: 'sendMessage',
		outputs: [],
		stateMutability: 'nonpayable',
		type: 'function',
	},
] as const

const _bytecode =
	'0x60806040523480156200001157600080fd5b50604051620009e6380380620009e683398181016040528101906200003791906200014a565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639c1121416001546014306040518463ffffffff1660e01b8152600401620000e093929190620001be565b600060405180830381600087803b158015620000fb57600080fd5b505af115801562000110573d6000803e3d6000fd5b50505050505062000281565b6000815190506200012d816200024d565b92915050565b600081519050620001448162000267565b92915050565b600080604083850312156200015e57600080fd5b60006200016e858286016200011c565b9250506020620001818582860162000133565b9150509250929050565b6200019681620001fb565b82525050565b620001a78162000239565b82525050565b620001b8816200022f565b82525050565b6000606082019050620001d56000830186620001ad565b620001e460208301856200019c565b620001f360408301846200018b565b949350505050565b600062000208826200020f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600062000246826200022f565b9050919050565b6200025881620001fb565b81146200026457600080fd5b50565b62000272816200022f565b81146200027e57600080fd5b50565b61075580620002916000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806311eeaf081461005c5780633d3f70041461008c5780637b5d2534146100a8578063a0f44c92146100c6578063eed02e4b146100e4575b600080fd5b610076600480360381019061007191906104a0565b610100565b6040516100839190610572565b60405180910390f35b6100a660048036038101906100a1919061041f565b610120565b005b6100b0610224565b6040516100bd919061058d565b60405180910390f35b6100ce610248565b6040516100db91906105cc565b60405180910390f35b6100fe60048036038101906100f991906104a0565b61024e565b005b60026020528060005260406000206000915054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633bc778e3600154858888604051602001610173929190610559565b6040516020818303038152906040528051906020012060001c86600154876040518763ffffffff1660e01b81526004016101b296959493929190610610565b600060405180830381600087803b1580156101cc57600080fd5b505af11580156101e0573d6000803e3d6000fd5b505050507f476e04c786e60f629af918e59f7b2d948f3b488bf1258cab1bf3a4351521b46f85856040516102159291906105a8565b60405180910390a15050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b600115156002600083815260200190815260200160002060009054906101000a900460ff16151514156102ad576040517f6b41035600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631783efc3600154836040518363ffffffff1660e01b815260040161030a9291906105e7565b600060405180830381600087803b15801561032457600080fd5b505af1158015610338573d6000803e3d6000fd5b5050505060016002600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f8295284d5d3269bfeaedc920c6506a3ee3bf86b36a96719fefb22fc606dc26628160405161039791906105cc565b60405180910390a150565b6000819050826020600802820111156103ba57600080fd5b92915050565b60008083601f8401126103d257600080fd5b8235905067ffffffffffffffff8111156103eb57600080fd5b60208301915083600182028301111561040357600080fd5b9250929050565b60008135905061041981610708565b92915050565b6000806000806000610160868803121561043857600080fd5b600086013567ffffffffffffffff81111561045257600080fd5b61045e888289016103c0565b955095505060206104718882890161040a565b93505060406104828882890161040a565b9250506060610493888289016103a2565b9150509295509295909350565b6000602082840312156104b257600080fd5b60006104c08482850161040a565b91505092915050565b6104d661010083836106e8565b5050565b6104e38161068e565b82525050565b6104f2816106c4565b82525050565b60006105048385610672565b93506105118385846106e8565b61051a836106f7565b840190509392505050565b60006105318385610683565b935061053e8385846106e8565b82840190509392505050565b610553816106ba565b82525050565b6000610566828486610525565b91508190509392505050565b600060208201905061058760008301846104da565b92915050565b60006020820190506105a260008301846104e9565b92915050565b600060208201905081810360008301526105c38184866104f8565b90509392505050565b60006020820190506105e1600083018461054a565b92915050565b60006040820190506105fc600083018561054a565b610609602083018461054a565b9392505050565b60006101a082019050610626600083018961054a565b610633602083018861054a565b610640604083018761054a565b61064d606083018661054a565b61065a608083018561054a565b61066760a08301846104c9565b979650505050505050565b600082825260208201905092915050565b600081905092915050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006106cf826106d6565b9050919050565b60006106e18261069a565b9050919050565b82818337600083830152505050565b6000601f19601f8301169050919050565b610711816106ba565b811461071c57600080fd5b5056fea26469706673582212200e4dfb06a97dcd859a388e0be75398b35de3934de33bfdacea11b712adf616fb64736f6c63430008040033'

type GlobalAnonymousFeedConstructorParams =
	| [signer?: Signer]
	| ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
	xs: GlobalAnonymousFeedConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class GlobalAnonymousFeed__factory extends ContractFactory {
	constructor(...args: GlobalAnonymousFeedConstructorParams) {
		if (isSuperArgs(args)) {
			super(...args)
		} else {
			super(_abi, _bytecode, args[0])
		}
	}

	override deploy(
		semaphoreAddress: PromiseOrValue<string>,
		_groupId: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<GlobalAnonymousFeed> {
		return super.deploy(semaphoreAddress, _groupId, overrides || {}) as Promise<GlobalAnonymousFeed>
	}
	override getDeployTransaction(
		semaphoreAddress: PromiseOrValue<string>,
		_groupId: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): TransactionRequest {
		return super.getDeployTransaction(semaphoreAddress, _groupId, overrides || {})
	}
	override attach(address: string): GlobalAnonymousFeed {
		return super.attach(address) as GlobalAnonymousFeed
	}
	override connect(signer: Signer): GlobalAnonymousFeed__factory {
		return super.connect(signer) as GlobalAnonymousFeed__factory
	}

	static readonly bytecode = _bytecode
	static readonly abi = _abi
	static createInterface(): GlobalAnonymousFeedInterface {
		return new utils.Interface(_abi) as GlobalAnonymousFeedInterface
	}
	static connect(address: string, signerOrProvider: Signer | Provider): GlobalAnonymousFeed {
		return new Contract(address, _abi, signerOrProvider) as GlobalAnonymousFeed
	}
}
