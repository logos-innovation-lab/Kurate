/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, type Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../../../../common'
import type {
	Pairing,
	PairingInterface,
} from '../../../../@semaphore-protocol/contracts/base/Pairing'

const _abi = [
	{
		inputs: [],
		name: 'Semaphore__InvalidProof',
		type: 'error',
	},
	{
		inputs: [],
		name: 'P1',
		outputs: [
			{
				components: [
					{
						internalType: 'uint256',
						name: 'X',
						type: 'uint256',
					},
					{
						internalType: 'uint256',
						name: 'Y',
						type: 'uint256',
					},
				],
				internalType: 'struct Pairing.G1Point',
				name: '',
				type: 'tuple',
			},
		],
		stateMutability: 'pure',
		type: 'function',
	},
	{
		inputs: [],
		name: 'P2',
		outputs: [
			{
				components: [
					{
						internalType: 'uint256[2]',
						name: 'X',
						type: 'uint256[2]',
					},
					{
						internalType: 'uint256[2]',
						name: 'Y',
						type: 'uint256[2]',
					},
				],
				internalType: 'struct Pairing.G2Point',
				name: '',
				type: 'tuple',
			},
		],
		stateMutability: 'pure',
		type: 'function',
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: 'uint256',
						name: 'X',
						type: 'uint256',
					},
					{
						internalType: 'uint256',
						name: 'Y',
						type: 'uint256',
					},
				],
				internalType: 'struct Pairing.G1Point',
				name: 'p1',
				type: 'tuple',
			},
			{
				components: [
					{
						internalType: 'uint256',
						name: 'X',
						type: 'uint256',
					},
					{
						internalType: 'uint256',
						name: 'Y',
						type: 'uint256',
					},
				],
				internalType: 'struct Pairing.G1Point',
				name: 'p2',
				type: 'tuple',
			},
		],
		name: 'addition',
		outputs: [
			{
				components: [
					{
						internalType: 'uint256',
						name: 'X',
						type: 'uint256',
					},
					{
						internalType: 'uint256',
						name: 'Y',
						type: 'uint256',
					},
				],
				internalType: 'struct Pairing.G1Point',
				name: 'r',
				type: 'tuple',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: 'uint256',
						name: 'X',
						type: 'uint256',
					},
					{
						internalType: 'uint256',
						name: 'Y',
						type: 'uint256',
					},
				],
				internalType: 'struct Pairing.G1Point',
				name: 'p',
				type: 'tuple',
			},
		],
		name: 'negate',
		outputs: [
			{
				components: [
					{
						internalType: 'uint256',
						name: 'X',
						type: 'uint256',
					},
					{
						internalType: 'uint256',
						name: 'Y',
						type: 'uint256',
					},
				],
				internalType: 'struct Pairing.G1Point',
				name: 'r',
				type: 'tuple',
			},
		],
		stateMutability: 'pure',
		type: 'function',
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: 'uint256',
						name: 'X',
						type: 'uint256',
					},
					{
						internalType: 'uint256',
						name: 'Y',
						type: 'uint256',
					},
				],
				internalType: 'struct Pairing.G1Point[]',
				name: 'p1',
				type: 'tuple[]',
			},
			{
				components: [
					{
						internalType: 'uint256[2]',
						name: 'X',
						type: 'uint256[2]',
					},
					{
						internalType: 'uint256[2]',
						name: 'Y',
						type: 'uint256[2]',
					},
				],
				internalType: 'struct Pairing.G2Point[]',
				name: 'p2',
				type: 'tuple[]',
			},
		],
		name: 'pairingCheck',
		outputs: [],
		stateMutability: 'view',
		type: 'function',
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: 'uint256',
						name: 'X',
						type: 'uint256',
					},
					{
						internalType: 'uint256',
						name: 'Y',
						type: 'uint256',
					},
				],
				internalType: 'struct Pairing.G1Point',
				name: 'p',
				type: 'tuple',
			},
			{
				internalType: 'uint256',
				name: 's',
				type: 'uint256',
			},
		],
		name: 'scalar_mul',
		outputs: [
			{
				components: [
					{
						internalType: 'uint256',
						name: 'X',
						type: 'uint256',
					},
					{
						internalType: 'uint256',
						name: 'Y',
						type: 'uint256',
					},
				],
				internalType: 'struct Pairing.G1Point',
				name: 'r',
				type: 'tuple',
			},
		],
		stateMutability: 'view',
		type: 'function',
	},
] as const

const _bytecode =
	'0x611508610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c806318c77c95146100715780631de21b76146100a15780632f3ed539146100bf57806330332aea146100db5780636e1b6990146100f9578063a680077514610129575b600080fd5b61008b6004803603810190610086919061108a565b610159565b60405161009891906111de565b60405180910390f35b6100a96102da565b6040516100b691906111de565b60405180910390f35b6100d960048036038101906100d49190610ff5565b6102fe565b005b6100e3610951565b6040516100f091906111f9565b60405180910390f35b610113600480360381019061010e91906110c6565b610a1b565b60405161012091906111de565b60405180910390f35b610143600480360381019061013e9190611061565b610ba9565b60405161015091906111de565b60405180910390f35b610161610cca565b610169610ce4565b8360000151816000600481106101a8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020181815250508360200151816001600481106101f0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002018181525050826000015181600260048110610238577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002018181525050826020015181600360048110610280577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002018181525050600060608360c08460066107d05a03fa9050806102d2576040517f4aa6bc4000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505092915050565b6102e2610cca565b6040518060400160405280600181526020016002815250905090565b8051825114610339576040517f4aa6bc4000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082519050600060068261034e919061133a565b905060008167ffffffffffffffff811115610392577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156103c05781602001602082028036833780820191505090505b50905060005b838110156108a557858181518110610407577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160000151826000600684610423919061133a565b61042d91906112e4565b81518110610464577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508581815181106104a9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001518260016006846104c5919061133a565b6104cf91906112e4565b81518110610506577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505084818151811061054b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160000151600060028110610590577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518260026006846105a5919061133a565b6105af91906112e4565b815181106105e6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505084818151811061062b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160000151600160028110610670577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151826003600684610685919061133a565b61068f91906112e4565b815181106106c6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505084818151811061070b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200151600060028110610750577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151826004600684610765919061133a565b61076f91906112e4565b815181106107a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508481815181106107eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200151600160028110610830577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151826005600684610845919061133a565b61084f91906112e4565b81518110610886577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061089d90611403565b9150506103c6565b506108ae610d06565b6000602082602086026020860160086107d05a03fa90508015806109115750600182600060018110610909577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015114155b15610948576040517f4aa6bc4000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050565b610959610d28565b604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa815250815250905090565b610a23610cca565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018210610a7c576040517f4aa6bc4000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a84610d4e565b836000015181600060038110610ac3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002018181525050836020015181600160038110610b0b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020181815250508281600260038110610b4f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002018181525050600060608360808460076107d05a03fa905080610ba1576040517f4aa6bc4000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505092915050565b610bb1610cca565b60008260000151148015610bc9575060008260200151145b15610bec5760405180604001604052806000815260200160008152509050610cc5565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478260000151101580610c4357507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47826020015110155b15610c7a576040517f4aa6bc4000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052808360000151815260200183602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610cbf9190611394565b81525090505b919050565b604051806040016040528060008152602001600081525090565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280610d3b610d70565b8152602001610d48610d70565b81525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000610da5610da084611239565b611214565b90508083825260208201905082856040860282011115610dc457600080fd5b60005b85811015610df45781610dda8882610f48565b845260208401935060408301925050600181019050610dc7565b5050509392505050565b6000610e11610e0c84611265565b611214565b90508083825260208201905082856080860282011115610e3057600080fd5b60005b85811015610e605781610e468882610f94565b845260208401935060808301925050600181019050610e33565b5050509392505050565b6000610e7d610e7884611291565b611214565b90508082856020860282011115610e9357600080fd5b60005b85811015610ec35781610ea98882610fe0565b845260208401935060208301925050600181019050610e96565b5050509392505050565b600082601f830112610ede57600080fd5b8135610eee848260208601610d92565b91505092915050565b600082601f830112610f0857600080fd5b8135610f18848260208601610dfe565b91505092915050565b600082601f830112610f3257600080fd5b6002610f3f848285610e6a565b91505092915050565b600060408284031215610f5a57600080fd5b610f646040611214565b90506000610f7484828501610fe0565b6000830152506020610f8884828501610fe0565b60208301525092915050565b600060808284031215610fa657600080fd5b610fb06040611214565b90506000610fc084828501610f21565b6000830152506040610fd484828501610f21565b60208301525092915050565b600081359050610fef816114bb565b92915050565b6000806040838503121561100857600080fd5b600083013567ffffffffffffffff81111561102257600080fd5b61102e85828601610ecd565b925050602083013567ffffffffffffffff81111561104b57600080fd5b61105785828601610ef7565b9150509250929050565b60006040828403121561107357600080fd5b600061108184828501610f48565b91505092915050565b6000806080838503121561109d57600080fd5b60006110ab85828601610f48565b92505060406110bc85828601610f48565b9150509250929050565b600080606083850312156110d957600080fd5b60006110e785828601610f48565b92505060406110f885828601610fe0565b9150509250929050565b600061110e83836111cf565b60208301905092915050565b611123816112c1565b61112d81846112d9565b9250611138826112b7565b8060005b838110156111695781516111508782611102565b965061115b836112cc565b92505060018101905061113c565b505050505050565b60408201600082015161118760008501826111cf565b50602082015161119a60208501826111cf565b50505050565b6080820160008201516111b6600085018261111a565b5060208201516111c9604085018261111a565b50505050565b6111d8816113c8565b82525050565b60006040820190506111f36000830184611171565b92915050565b600060808201905061120e60008301846111a0565b92915050565b600061121e61122f565b905061122a82826113d2565b919050565b6000604051905090565b600067ffffffffffffffff8211156112545761125361147b565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156112805761127f61147b565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156112ac576112ab61147b565b5b602082029050919050565b6000819050919050565b600060029050919050565b6000602082019050919050565b600081905092915050565b60006112ef826113c8565b91506112fa836113c8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561132f5761132e61144c565b5b828201905092915050565b6000611345826113c8565b9150611350836113c8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156113895761138861144c565b5b828202905092915050565b600061139f826113c8565b91506113aa836113c8565b9250828210156113bd576113bc61144c565b5b828203905092915050565b6000819050919050565b6113db826114aa565b810181811067ffffffffffffffff821117156113fa576113f961147b565b5b80604052505050565b600061140e826113c8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156114415761144061144c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6114c4816113c8565b81146114cf57600080fd5b5056fea26469706673582212206f89275f5034a8e37c6dbf5053d1dd8f51c9667a5fde6119a4e8d789fd2d4f9364736f6c63430008040033'

type PairingConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
	xs: PairingConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class Pairing__factory extends ContractFactory {
	constructor(...args: PairingConstructorParams) {
		if (isSuperArgs(args)) {
			super(...args)
		} else {
			super(_abi, _bytecode, args[0])
		}
	}

	override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<Pairing> {
		return super.deploy(overrides || {}) as Promise<Pairing>
	}
	override getDeployTransaction(
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): TransactionRequest {
		return super.getDeployTransaction(overrides || {})
	}
	override attach(address: string): Pairing {
		return super.attach(address) as Pairing
	}
	override connect(signer: Signer): Pairing__factory {
		return super.connect(signer) as Pairing__factory
	}

	static readonly bytecode = _bytecode
	static readonly abi = _abi
	static createInterface(): PairingInterface {
		return new utils.Interface(_abi) as PairingInterface
	}
	static connect(address: string, signerOrProvider: Signer | Provider): Pairing {
		return new Contract(address, _abi, signerOrProvider) as Pairing
	}
}
