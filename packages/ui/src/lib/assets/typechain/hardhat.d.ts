/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from 'ethers'
import {
	FactoryOptions,
	HardhatEthersHelpers as HardhatEthersHelpersBase,
} from '@nomiclabs/hardhat-ethers/types'

import * as Contracts from '.'

declare module 'hardhat/types/runtime' {
	interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
		getContractFactory(
			name: 'Pairing',
			signerOrOptions?: ethers.Signer | FactoryOptions,
		): Promise<Contracts.Pairing__factory>
		getContractFactory(
			name: 'SemaphoreGroups',
			signerOrOptions?: ethers.Signer | FactoryOptions,
		): Promise<Contracts.SemaphoreGroups__factory>
		getContractFactory(
			name: 'SemaphoreVerifier',
			signerOrOptions?: ethers.Signer | FactoryOptions,
		): Promise<Contracts.SemaphoreVerifier__factory>
		getContractFactory(
			name: 'ISemaphore',
			signerOrOptions?: ethers.Signer | FactoryOptions,
		): Promise<Contracts.ISemaphore__factory>
		getContractFactory(
			name: 'ISemaphoreGroups',
			signerOrOptions?: ethers.Signer | FactoryOptions,
		): Promise<Contracts.ISemaphoreGroups__factory>
		getContractFactory(
			name: 'ISemaphoreVerifier',
			signerOrOptions?: ethers.Signer | FactoryOptions,
		): Promise<Contracts.ISemaphoreVerifier__factory>
		getContractFactory(
			name: 'Semaphore',
			signerOrOptions?: ethers.Signer | FactoryOptions,
		): Promise<Contracts.Semaphore__factory>
		getContractFactory(
			name: 'PoseidonT3',
			signerOrOptions?: ethers.Signer | FactoryOptions,
		): Promise<Contracts.PoseidonT3__factory>
		getContractFactory(
			name: 'PoseidonT6',
			signerOrOptions?: ethers.Signer | FactoryOptions,
		): Promise<Contracts.PoseidonT6__factory>
		getContractFactory(
			name: 'GlobalAnonymousFeed',
			signerOrOptions?: ethers.Signer | FactoryOptions,
		): Promise<Contracts.GlobalAnonymousFeed__factory>

		getContractAt(
			name: 'Pairing',
			address: string,
			signer?: ethers.Signer,
		): Promise<Contracts.Pairing>
		getContractAt(
			name: 'SemaphoreGroups',
			address: string,
			signer?: ethers.Signer,
		): Promise<Contracts.SemaphoreGroups>
		getContractAt(
			name: 'SemaphoreVerifier',
			address: string,
			signer?: ethers.Signer,
		): Promise<Contracts.SemaphoreVerifier>
		getContractAt(
			name: 'ISemaphore',
			address: string,
			signer?: ethers.Signer,
		): Promise<Contracts.ISemaphore>
		getContractAt(
			name: 'ISemaphoreGroups',
			address: string,
			signer?: ethers.Signer,
		): Promise<Contracts.ISemaphoreGroups>
		getContractAt(
			name: 'ISemaphoreVerifier',
			address: string,
			signer?: ethers.Signer,
		): Promise<Contracts.ISemaphoreVerifier>
		getContractAt(
			name: 'Semaphore',
			address: string,
			signer?: ethers.Signer,
		): Promise<Contracts.Semaphore>
		getContractAt(
			name: 'PoseidonT3',
			address: string,
			signer?: ethers.Signer,
		): Promise<Contracts.PoseidonT3>
		getContractAt(
			name: 'PoseidonT6',
			address: string,
			signer?: ethers.Signer,
		): Promise<Contracts.PoseidonT6>
		getContractAt(
			name: 'GlobalAnonymousFeed',
			address: string,
			signer?: ethers.Signer,
		): Promise<Contracts.GlobalAnonymousFeed>

		// default types
		getContractFactory(
			name: string,
			signerOrOptions?: ethers.Signer | FactoryOptions,
		): Promise<ethers.ContractFactory>
		getContractFactory(
			abi: any[],
			bytecode: ethers.utils.BytesLike,
			signer?: ethers.Signer,
		): Promise<ethers.ContractFactory>
		getContractAt(
			nameOrAbi: string | any[],
			address: string,
			signer?: ethers.Signer,
		): Promise<ethers.Contract>
	}
}
